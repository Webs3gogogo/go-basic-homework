package main

import (
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"errors"
	"eth-client/store" // current module , store package generated by soljs
	"fmt"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"log"
	"math/big"
	"time"
)

//func main() {
//	//deployContract()
//	deployContractByBinData()
//}

// 使用soljs 生成出来的go代码进行部署
// 0x2Ee0a2b1F564941985Cb9594B12a57846b076DFB
func deployContract() {
	client := getEthClient()
	privateKey := getPrivateKey()
	publicKey := privateKey.Public()
	publicKeyECDSA := publicKey.(*ecdsa.PublicKey)
	publicAddress := crypto.PubkeyToAddress(*publicKeyECDSA)

	nonce, _ := client.PendingNonceAt(context.Background(), publicAddress)
	gasPrice, _ := client.SuggestGasPrice(context.Background())
	chainId, _ := client.ChainID(context.Background())

	auth, _ := bind.NewKeyedTransactorWithChainID(privateKey, chainId)
	auth.Nonce = big.NewInt(int64(nonce))
	auth.Value = big.NewInt(0)     // in wei
	auth.GasLimit = uint64(300000) // in units
	auth.GasPrice = gasPrice

	// constructor parameters for the contract
	version := "1.0"
	address, tx, instance, _ := store.DeployStore(auth, client, version)
	fmt.Println(address.Hex())
	fmt.Println(tx.Hash().Hex())
	_ = instance
}

// 通过二进制数据 并且发送事件 部署合约
// 以太坊中，部署合约其实也是发起了一笔交易，并不是一定需要 abigen 工具生成 go 代码。
// 不是只能使用生成的 go 的合约代码才能部署合约。
// 可以仅使用 ethclient，使用更底层的方法，直接通过发送交易的方式来部署合约。
// Contract deployed! Address: 0x467aE034422B600c99542c5ab95418530Bf63cd4, TxHash: 0x79ec19b33a31e94ff19cface885542841b2cb7c5d003729823d2cbdbf8f5b599
func deployContractByBinData() {
	client := getEthClient()
	// 创建Transaction
	privateKey := getPrivateKey()
	public := privateKey.Public()
	publicKeyECDSA, _ := public.(*ecdsa.PublicKey)
	publicAddress := crypto.PubkeyToAddress(*publicKeyECDSA)
	nonceAt, _ := client.PendingNonceAt(context.Background(), publicAddress)
	gasPrice, _ := client.SuggestGasPrice(context.Background())
	value := big.NewInt(0)
	data, _ := hex.DecodeString(getContractBytes())
	tx := types.NewTx(&types.LegacyTx{
		Nonce:    nonceAt,
		Value:    value,
		Gas:      300000,
		GasPrice: gasPrice,
		Data:     data,
	})
	// 签名Transaction

	chainId, err := client.ChainID(context.Background())
	if err != nil {
		log.Fatal(err)
	}
	signTx, err := types.SignTx(tx, types.NewEIP155Signer(chainId), privateKey)
	if err != nil {
		log.Fatal(err)
	}
	err = client.SendTransaction(context.Background(), signTx)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Transaction sent: %s\n", signTx.Hash().Hex())
	receipt, err := waitForReceipt(client, signTx.Hash())
	if err != nil {
		log.Fatal("Error waiting for receipt:", err)
	}

	fmt.Printf("Contract deployed! Address: %s, TxHash: %s\n", receipt.ContractAddress.Hex(), receipt.TxHash.Hex())
}

func waitForReceipt(client *ethclient.Client, hash common.Hash) (*types.Receipt, error) {
	// 等待交易被打包
	for {
		receipt, err := client.TransactionReceipt(context.Background(), hash)
		if err == nil {
			return receipt, nil
		}
		if !errors.Is(err, ethereum.NotFound) {
			return nil, err
		}
		// 等待一段时间后再次查询
		fmt.Println("Transaction not found yet, waiting...")
		time.Sleep(1 * time.Second)
	}
}

func getContractBytes() string {
	return "608060405234801561000f575f5ffd5b5060405161087838038061087883398181016040528101906100319190610193565b805f908161003f91906103ea565b50506104b9565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6100a58261005f565b810181811067ffffffffffffffff821117156100c4576100c361006f565b5b80604052505050565b5f6100d6610046565b90506100e2828261009c565b919050565b5f67ffffffffffffffff8211156101015761010061006f565b5b61010a8261005f565b9050602081019050919050565b8281835e5f83830152505050565b5f610137610132846100e7565b6100cd565b9050828152602081018484840111156101535761015261005b565b5b61015e848285610117565b509392505050565b5f82601f83011261017a57610179610057565b5b815161018a848260208601610125565b91505092915050565b5f602082840312156101a8576101a761004f565b5b5f82015167ffffffffffffffff8111156101c5576101c4610053565b5b6101d184828501610166565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061022857607f821691505b60208210810361023b5761023a6101e4565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261029d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610262565b6102a78683610262565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6102eb6102e66102e1846102bf565b6102c8565b6102bf565b9050919050565b5f819050919050565b610304836102d1565b610318610310826102f2565b84845461026e565b825550505050565b5f5f905090565b61032f610320565b61033a8184846102fb565b505050565b5b8181101561035d576103525f82610327565b600181019050610340565b5050565b601f8211156103a25761037381610241565b61037c84610253565b8101602085101561038b578190505b61039f61039785610253565b83018261033f565b50505b505050565b5f82821c905092915050565b5f6103c25f19846008026103a7565b1980831691505092915050565b5f6103da83836103b3565b9150826002028217905092915050565b6103f3826101da565b67ffffffffffffffff81111561040c5761040b61006f565b5b6104168254610211565b610421828285610361565b5f60209050601f831160018114610452575f8415610440578287015190505b61044a85826103cf565b8655506104b1565b601f19841661046086610241565b5f5b8281101561048757848901518255600182019150602085019450602081019050610462565b868310156104a457848901516104a0601f8916826103b3565b8355505b6001600288020188555050505b505050505050565b6103b2806104c65f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c806348f343f31461004357806354fd4d5014610073578063f56256c714610091575b5f5ffd5b61005d600480360381019061005891906101d7565b6100ad565b60405161006a9190610211565b60405180910390f35b61007b6100c2565b604051610088919061029a565b60405180910390f35b6100ab60048036038101906100a691906102ba565b61014d565b005b6001602052805f5260405f205f915090505481565b5f80546100ce90610325565b80601f01602080910402602001604051908101604052809291908181526020018280546100fa90610325565b80156101455780601f1061011c57610100808354040283529160200191610145565b820191905f5260205f20905b81548152906001019060200180831161012857829003601f168201915b505050505081565b8060015f8481526020019081526020015f20819055507fe79e73da417710ae99aa2088575580a60415d359acfad9cdd3382d59c80281d48282604051610194929190610355565b60405180910390a15050565b5f5ffd5b5f819050919050565b6101b6816101a4565b81146101c0575f5ffd5b50565b5f813590506101d1816101ad565b92915050565b5f602082840312156101ec576101eb6101a0565b5b5f6101f9848285016101c3565b91505092915050565b61020b816101a4565b82525050565b5f6020820190506102245f830184610202565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61026c8261022a565b6102768185610234565b9350610286818560208601610244565b61028f81610252565b840191505092915050565b5f6020820190508181035f8301526102b28184610262565b905092915050565b5f5f604083850312156102d0576102cf6101a0565b5b5f6102dd858286016101c3565b92505060206102ee858286016101c3565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061033c57607f821691505b60208210810361034f5761034e6102f8565b5b50919050565b5f6040820190506103685f830185610202565b6103756020830184610202565b939250505056fea2646970667358221220e4b6e8ac928ba6b46811d0e5327cd28170a1586d8901df85ba71882476423fe764736f6c634300081e0033"
}
